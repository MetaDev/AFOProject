

import FemGui
import FemToolsCcx
import Part
import Fem
import FemGmshTools
import ObjectsFem

import numpy as np
import itertools
import utility

import vector_calc as vc
reload(vc)


data_path = "C:\\Users\\Administrator\\Google Drive\\Windows\\Research\\Project\\FEM\\Results\\data"
#to run script open FreeCAD
#create empty project and use buildScene()
#or open selfmadeAFO.FCStd\cylinderAFO.FCStd and set the analysis to active
simple_afo=True
#and enter in ptyhonconsole following command:
#execfile("C:\Users\Administrator\Google Drive\Windows\Research\Project\FEM\Scripts\FEMSimple.FCMacro")


def clearAll():
    if App.ActiveDocument==None:
        App.newDocument("Test")
        App.setActiveDocument("Test")
    doc = App.ActiveDocument
    for obj in doc.Objects:
        doc.removeObject(obj.Label)

def buildScene():
    clearAll()
    doc = App.ActiveDocument


    # some geometry
    box = Part.makeBox(1, 1, 1)

    box_obj = App.ActiveDocument.addObject('Part::Box', 'Box')
    box_obj.Length = 4
    box_obj.Height = 20

    # change box and remesh, we do not need a new instance of gmsh_mesh class

    # error = gmsh_mesh.create_mesh()
    # print error

    # App.ActiveDocument.recompute()
    # change mesh params and remesh, we need a new instance of gmsh_mesh class
    # femmesh_obj_gmsh.CharacteristicLengthMax = 1
    # gmsh_mesh = FemGmshTools.FemGmshTools(femmesh_obj_gmsh)
    # error = gmsh_mesh.create_mesh()
    # print error
    # App.ActiveDocument.recompute()


    # analysis
    analysis_object = ObjectsFem.makeAnalysis("Analysis")
    # solver
    solver_object = ObjectsFem.makeSolverCalculix('CalculiX')
    solver_object.AnalysisType = 'static'
    solver_object.GeometricalNonlinearity = 'linear'
    # solver_object.SteadyState = True
    # solver_object.Accurency = 0.01
    # solver_object.EigenmodeNumber = 1
    solver_object.ThermoMechSteadyState = True
    solver_object.MatrixSolverType = 'default'
    solver_object.IterationsControlParameterTimeUse = False
    doc.Analysis.Member = doc.Analysis.Member + [solver_object]


    # fixed_constraint
    fixed_constraint = doc.addObject("Fem::ConstraintFixed", "FemConstraintFixed")
    fixed_constraint.References = [(doc.Box, "Face5s")]
    doc.Analysis.Member = doc.Analysis.Member + [fixed_constraint]


    # import MechanicalMaterial
    material_object = ObjectsFem.makeMaterialSolid("SolidMaterial")
    mat = material_object.Material
    mat['Name'] = "Steel-Generic"
    mat['YoungsModulus'] = "210000 MPa"
    mat['PoissonRatio'] = "0.30"
    mat['Density'] = "7900 kg/m^3"
    material_object.Material = mat
    doc.Analysis.Member = doc.Analysis.Member + [material_object]

    # make an initial FEM mesh
    femmesh_obj_gmsh = ObjectsFem.makeMeshGmsh('MyGMSHMeshObj')
    femmesh_obj_gmsh.Part = box_obj
    App.ActiveDocument.recompute()
    gmsh_mesh = FemGmshTools.FemGmshTools(femmesh_obj_gmsh)
    error = gmsh_mesh.create_mesh()
    print (error)
    App.ActiveDocument.recompute()

    # mesh
    doc.Analysis.Member = doc.Analysis.Member + [doc.MyGMSHMeshObj]

    # recompute doc
    doc.recompute()
    #set displacements
    doc = App.ActiveDocument
     # displacement constraint setup
    displ_constraint = doc.addObject(
        "Fem::ConstraintDisplacement", "FemConstraintDisplacement")
    displ_constraint.References = [(doc.Box, "Face6")]
    displ_constraint.xFree = False
    displ_constraint.yFree = False
    displ_constraint.zFree = False
    doc.Analysis.Member = doc.Analysis.Member + [displ_constraint]
    return femmesh_obj_gmsh.FemMesh, box_obj.Shape,displ_constraint

   

def runFEA(femmesh, shape,displ_constraint, n_sensors=10, n_disp=1):
    
    #FemGui.setActiveAnalysis(FreeCAD.ActiveDocument.Analysis)
    fea = FemToolsCcx.FemToolsCcx()
    # number of sensors

    faceNodes = vc.getNodesFromFEMMeshSurface(femmesh, shape)
    allNodes = vc.getNodesFromFemMeshWithFace(femmesh)
    # calculate random location of sensors, the same for every generated sample
   
    
    displacements = np.random.uniform(-0.02,0.02,size=(n_disp,3))
    surface_normals = vc.getNormalOfFemmeshSurface(femmesh)
    #calculate 
    mesh_normal_CS = [vc.rand_triangle_coord_system(n) for n in surface_normals]
    surface_strains=[]
    surface_proj_strains=[]
    all_strains = []
    
    for disp in displacements:
        displ_constraint.xDisplacement = disp[0]
        displ_constraint.yDisplacement = disp[1]
        displ_constraint.zDisplacement = disp[2]

        fea.update_objects()
        # a string is returned, the string should be empty
        fea.check_prerequisites()
        fea.reset_all()
        fea.run()

        fea.load_results()
        result_object = App.ActiveDocument.getObject(
            "CalculiX_static_results")

        # run the analysis
        #all strains
        all_strains.append([vc.vectorToNPArr(v) for v in result_object.StrainVectors])
        #strains on surface
        surface_strain=[result_object.StrainVectors[i] for i in faceNodes]
        surface_proj_strains.append(vc.project_3Dstrains_on_mesh_surface(surface_strain,mesh_normal_CS))
        surface_strains.append(surface_strain)
    return list(displacements), all_strains,surface_strains,surface_proj_strains

def print_results( all_strains,surface_strains,surface_proj_strains, disp_list):
    # convert to numpy array
    all_strains_arr = np.array([np.array(strains) for strains in all_strains])
    surface_strains_arr = np.array([np.array(strains) for strains in surface_strains])
    surface_proj_strains_arr = np.array([np.array(strains) for strains in surface_proj_strains])
    disp_arr = np.array(disp_list)
    
    np.save(data_path + "\\all_strain_list"+"_simple_afo_"+str(simple_afo), all_strains_arr)
    np.save(data_path + "\\surface_strain_list"+"_simple_afo_"+str(simple_afo), surface_strains_arr)
    np.save(data_path + "\\proj_surface_strain_list"+"_simple_afo_"+str(simple_afo), surface_proj_strains_arr)
    np.save(data_path + "\\displacement_list"+"_simple_afo_"+str(simple_afo), disp_arr)
    
    
#femmesh, shape,displ_constraint= buildScene()
#to be used on self built afo scene

if simple_afo:
    femmesh =  App.ActiveDocument.getObject(
                "FEMMeshGMSH001").FemMesh
    shape =  App.ActiveDocument.getObject(
                "Fusion001001").Shape
    displ_constraint = App.ActiveDocument.getObject(
                "FemConstraintDisplacement")
#cylinder project
else:
    femmesh =  App.ActiveDocument.FEMMeshGMSH.FemMesh
    shape =  App.ActiveDocument.Cut001.Shape
    displ_constraint = App.ActiveDocument.getObject(
                "FemConstraintDisplacement")
    
#the number of displacements thus number of points generated
n_disp=1
n_sensors=10

displacements, all_strains,surface_strains,surface_proj_strains = runFEA(femmesh, shape,displ_constraint, n_sensors=n_sensors, 
                                                                                                n_disp=n_disp)
print_results(all_strains,surface_strains,surface_proj_strains, (displacements))
print(surface_proj_strains)
# # post processing of the result
# # femmesh_obj_gmsh.ViewObject.setNodeDisplacementByVectors(result_object.NodeNumbers, result_object.DisplacementVectors)
# print(strains)
# App.ActiveDocument.MyGMSHMeshObj.ViewObject.setNodeColorByScalars(
#     femmesh.Nodes, 
#                     App.ActiveDocument.getObject("CalculiX_static_results").StressVectors)
# # App.ActiveDocument.MyGMSHMeshObj.ViewObject.setNodeColorByScalars(rand_nodes, strains[0])
App.ActiveDocument.getObject("FEMMeshGMSH001").HighlightedNodes = list(range(20))
# femmesh_obj_gmsh.ViewObject.applyDisplacement(10)