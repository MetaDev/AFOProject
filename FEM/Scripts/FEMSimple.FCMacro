import numpy as np
import FemGui
import FemToolsCcx

def clearAll():
    doc = App.ActiveDocument
    for obj in doc.Objects:
        doc.removeObject(obj.Label)
def vectorToNPArr(v):
    return np.array([v.x,v.y,v.z])

clearAll()
doc = App.ActiveDocument

import Part, Fem, FemGmshTools
import ObjectsFem
# some geometry
box = Part.makeBox(1,1,1)

box_obj = App.ActiveDocument.addObject('Part::Box', 'Box')
box_obj.Length = 4
box_obj.Height = 20

## change box and remesh, we do not need a new instance of gmsh_mesh class

#error = gmsh_mesh.create_mesh()
#print error
#App.ActiveDocument.recompute()
## change mesh params and remesh, we need a new instance of gmsh_mesh class
#femmesh_obj_gmsh.CharacteristicLengthMax = 1
#gmsh_mesh = FemGmshTools.FemGmshTools(femmesh_obj_gmsh)
#error = gmsh_mesh.create_mesh()
#print error
#App.ActiveDocument.recompute()


# analysis
analysis_object = ObjectsFem.makeAnalysis("Analysis")
# solver
solver_object = ObjectsFem.makeSolverCalculix('CalculiX')
solver_object.AnalysisType = 'static' 
solver_object.GeometricalNonlinearity = 'linear'
#solver_object.SteadyState = True
#solver_object.Accurency = 0.01
#solver_object.EigenmodeNumber = 1
solver_object.ThermoMechSteadyState = True
solver_object.MatrixSolverType = 'default'
solver_object.IterationsControlParameterTimeUse = False
doc.Analysis.Member = doc.Analysis.Member + [solver_object]



# fixed_constraint
fixed_constraint = doc.addObject("Fem::ConstraintFixed", "FemConstraintFixed")
fixed_constraint.References = [(doc.Box, "Face5s")]
doc.Analysis.Member = doc.Analysis.Member + [fixed_constraint]


#import MechanicalMaterial
material_object = ObjectsFem.makeMaterialSolid("SolidMaterial")
mat = material_object.Material
mat['Name'] = "Steel-Generic"
mat['YoungsModulus'] = "210000 MPa"
mat['PoissonRatio'] = "0.30"
mat['Density'] = "7900 kg/m^3"
material_object.Material = mat
doc.Analysis.Member = doc.Analysis.Member + [material_object]

# make an initial FEM mesh
femmesh_obj_gmsh = ObjectsFem.makeMeshGmsh('MyGMSHMeshObj')
femmesh_obj_gmsh.Part = box_obj
App.ActiveDocument.recompute()
gmsh_mesh = FemGmshTools.FemGmshTools(femmesh_obj_gmsh)
error = gmsh_mesh.create_mesh()
print error
App.ActiveDocument.recompute()

# mesh
doc.Analysis.Member = doc.Analysis.Member + [doc.MyGMSHMeshObj]

# recompute doc
doc.recompute()

FemGui.setActiveAnalysis(FreeCAD.ActiveDocument.Analysis)

fea = FemToolsCcx.FemToolsCcx()

#calculate random location of sensors, the same for every generated sample
rand_node_i=np.random.choice(range(len(femmesh_obj.FemMesh.Nodes)),size=n_vec).astype(int)



#displacement constraint setup
displ_constraint = doc.addObject("Fem::ConstraintDisplacement", "FemConstraintDisplacement")
displ_constraint.References = [(doc.Box, "Face6")]
displ_constraint.xFree=False
displ_constraint.yFree=False
displ_constraint.zFree=False
doc.Analysis.Member = doc.Analysis.Member + [displ_constraint]
#number of sensors
n_vec=10

n_disp=5
disp_range = np.linspace(-0.2,0.2,num=n_disp)
for x_disp in disp_range:
    for y_disp in disp_range:
        for z_disp in disp_range:
x_dis=0.1
y_dis=0.1
z_dis=0.1
#displacement constraint parameters

displ_constraint.xDisplacement =x_dis
displ_constraint.yDisplacement =y_dis
displ_constraint.zDisplacement =z_dis
#TODO check if changes after adding element are saved

            
#TODO create loop where data is generated, write strain vectors and displacement to file
#make sure only 
fea.update_objects()
fea.check_prerequisites() # a string is returned, the string should be empty
fea.reset_all()
fea.run()

fea.load_results()
result_object = App.ActiveDocument.getObject("CalculiX_static_results")
	
# run the analysis

rand_nodes = [femmesh_obj_gmsh.FemMesh.Nodes[i] for i in rand_node_i]
strains=[fea_result.StrainVectors[i] for i in rand_nodes]







#post processing of the result
#femmesh_obj_gmsh.ViewObject.setNodeDisplacementByVectors(result_object.NodeNumbers, result_object.DisplacementVectors)
##femmesh_obj_gmsh.ViewObject.setNodeColorByScalars(result_object.NodeNumbers, result_object.StrainVectors)
#femmesh_obj_gmsh.ViewObject.applyDisplacement(10)




